#!/usr/bin/env node

/**
 * Subito MusicJSON Converter
 *
 * Usage: musicjson [options] <file>
 *
 *  Options:
 *
 *    -h, --help              output usage information
 *    -V, --version           output the version number
 *    -j, --json              Converts the file to MusicJSON
 *    -x, --xml               Converts the file to MusicXML
 *    -i, --indent [level=2]  Indents the converted source nicely
 */

var fs        = require('fs')
  , program   = require('commander')
  , pkg       = require('../package.json')
  , MusicJSON = require('../lib/musicjson.js')
  , source, converted, indent;

function times(string, times) {
  return Array(times + 1).join(string);
}

function formatXML(str, indentlvl) {
  str = str.replace(/(>)(<)(\/*)/g, '$1\n$2$3');

  var xml = '', pad = 0, i, length, indent, node,
      lines = str.split('\n'), indentlvl = indentlvl || 2;

  for (i = 0, length = lines.length; i < length; i++) {
    indent = 0;
    node = lines[i];

    if(node.match(/.+<\/\w[^>]*>$/)) {
      indent = 0;
    } else if (node.match(/^<\/\w/) && pad > 0) {
      pad = pad - 1;
    } else if (node.match(/^<\w[^>]*[^\/]>.*$/)) {
      indent = 1;
    } else {
      indent = 0;
    }

    xml = xml + times(' ', pad * indentlvl) + node + '\n';
    pad = pad + indent;
  }

  return xml;
}

function fail(message, err) {
  console.error(message);
  console.error(err.message);
  process.exit(1);
}


// Command line interface
program
  .version(pkg.version)
  .usage('[options] <file>')
  .option('-j, --json', 'Converts the file to MusicJSON')
  .option('-x, --xml', 'Converts the file to MusicXML')
  .option('-i, --indent [level=2]', 'Indents the converted source nicely')
  .option('-o, --order [preserve=true]',
          'If set to false, tag order is not preserved')
  .parse(process.argv);

source = program.args[0];

if (!source || !(program.json || program.xml)) {
  program.help();
} else if (program.json) {
  source = fs.readFileSync(source, 'utf8');

  var preserve = 'order' in program ? program.order === 'true' : true;

  MusicJSON.musicJSON({
    source: source,
    preserveOrder: preserve
  }, function(err, output) {
    err && fail('An error occured:', err);

    indent = (program.indent) ? (+program.indent || 2) : 0;
    converted = JSON.stringify(output, null, times(' ', indent));

    console.log(converted);
  });
} else {
  try {
    source = JSON.parse(fs.readFileSync(source, 'utf8'));
  } catch(err) {
    fail('Invalid MusicJSON source', err);
  }

  MusicJSON.musicXML(source, function(err, root) {
    err && fail('An error occured:', err);

    if (program.indent) {
      indent = {
        pretty: true,
        indent: times(' ', +program.indent || 2),
        newline: '\n'
      }
    }

    converted = root.end(indent);
    console.log(converted);
  });
}

